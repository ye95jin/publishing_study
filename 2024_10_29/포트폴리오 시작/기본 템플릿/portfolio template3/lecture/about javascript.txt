const intro1=gsap.timeline({paused: true});

gsap.timeline() 코드는 새로운 타임라인 애니메이션을 생성합니다. 타임라인은 여러 애니메이션을 순차적으로 배치할 수 있게 해줍니다.

{paused: true} 코드는 타임라인을 초기화할 때 일시 정지 상태로 설정합니다. 즉, 명시적으로 재생하라고 지시할 때까지 애니메이션이 시작되지 않습니다.


intro1.timeScale(6).play();

timeScale(6) 코드는 타임라인의 속도를 조정합니다. 6이라는 것은 애니메이션이 정상 속도의 여섯 배로 재생된다는 의미입니다.

play() 코드는 타임라인의 재생을 시작합니다. 즉, 애니메이션이 실행되기 시작합니다.


if(window.matchMedia("(max-width: 969px)").matches){

969 이하의 해상도의 제어입니다. 모바일 해상도입니다.


intro1.to(".intro-sec .title-t", { y: 0, x: 0, duration: 4 })

.intro-sec .title-t 요소의 동적인 제어입니다.

관련 스타일입니다.

transform: translate(0,-25vh);


.to(".intro-sec .title-p", { y: 0, x: 0, duration: 4 }, 0)

0이라는 숫자는 애니메이션이 타임라인의 시작점(0초)에서 시작됨을 의미합니다. 즉, 이전 애니메이션과 동시에 시작됩니다.

관련 스타일입니다.

transform: translate(0,25vh);


.to(".intro-sec .hidden-t .basic ", { duration: 2 })

애니메이션이 2초 동안 진행됨을 나타냅니다. 그러나 이 코드에서는 이동이나 변형과 같은 구체적인 속성이 지정되지 않았기 때문에 단순한 시간 지연을 의미합니다.


.to(".intro .hidden-t .color ", { alpha: 1, duration: 4, delay: -1 })

delay: -1 : 이 값은 애니메이션이 시작되기 전에 1초를 미리 시작하게 만듭니다. 즉, 이전 애니메이션이 끝나기 1초 전에 이 애니메이션이 시작됩니다.


mainSwiper.slideToLoop($(this).index());

이 메서드는 슬라이드의 인덱스를 기반으로 슬라이드를 이동하는 데 사용됩니다.

slideToLoop() 코드 루프 모드에서 슬라이드를 이동시키는 메서드입니다. 즉, 슬라이드가 마지막에 도달한 후 다시 처음으로 돌아가는 경우에 유용합니다.


const tl1=gsap.timeline({
	scrollTrigger: {
		trigger: ".pin1",
		scrub: 1,
		pin: ".pin1",
		start:"top top",
		end: "+=300%"
	}
});


trigger: ".pin1",

스크롤 이벤트가 발생할 요소를 지정합니다. 여기서는 클래스가 pin1인 요소가 트리거 역할을 합니다.


scrub: 1,

스크롤과 애니메이션의 동기화 정도를 설정합니다. 1로 설정하면 스크롤의 위치에 따라 애니메이션이 1초 동안 부드럽게 진행됩니다.


pin: ".pin1",

스크롤 시 해당 요소를 고정(pinning)합니다. 즉, 사용자가 스크롤할 때 .pin1 요소가 화면에 고정되어 다른 내용이 스크롤됩니다.


start: "top top",

애니메이션이 시작되는 지점을 설정합니다. 여기서는 스크롤의 최상단이 .pin1 요소의 최상단에 닿을 때 시작합니다.


end: "+=300%",

애니메이션이 끝나는 지점을 설정합니다. 현재 위치에서 300% 만큼 더 스크롤한 지점에서 애니메이션이 끝납니다. 이는 스크롤이 길어질 수 있음을 의미합니다.

예를 들어, 현재 위치가 페이지의 최상단일 때, 사용자가 추가로 페이지 높이의 300%를 더 스크롤해야 애니메이션이 끝납니다.